<?php

/* 1.Напишите функцию, возвращающую дескриптор <img /> разметки HTML-страницы. Эта функция должна принимать URL
изображения в качестве обязательного аргумента, а также текст надписи, ширину и высоту изображения в качестве
необязательных аргументов alt, height и width соответственно.
*/
echo 'Упражнение 1';

function html_img($url, $width = null, $height = null, $alt = null) {
		$html = '<img src="' . $url . '"';
	if (isset($width)) {
		$html .= ' width="' . $width . '"';
	}
	if (isset($height)) {
		$html .= ' height="' . $height . '"';
	}
	if (isset ($alt)) {
		$html .= ' alt="' . $alt . '"';
	}
	$html .= '/>';
	return $html;
}

/* 2.Видоизмените функцию из предыдущего упражнения таким образом, чтобы передавать ей только имя файла в качестве
аргумента URL. Введите глобальную переменную в теле данной функции, чтобы дополнить указанное имя файла до полного
URL. Так, если данной функции передано имя файла photo.png, а глобальная переменная содержит путь /images/, то 
атрибут возвращаемого дескриптора <img> будет содержать путь /images/photo.png. Такая функция упрощает поддержание
правильности дескрипторов изображений даже в том случае, если изображения размещаются по новому пути или на другом
сервере. Для этого достаточно изменить содержимое глобальной переменной, например, с /images/ на
http://images.example.com/.
*/
echo 'Упражнение 2';

function html_img2($file, $width = null, $height = null, $alt = null) {
	 if (isset($GLOBALS['image'])) {
	 	$file = $GLOBALS['image'] . $file;
	  }
	  	$html = '<img src="' . $file . '"';
	  if (isset($width)) {
	  	$html .= ' width="' . $width . '"';
	  }	  
	  if (isset($height)) {
	  	$html .= ' height="' . $height . '"';
	  } 
	  if (isset($alt)) {
	  	$html .= ' alt="' . $alt . '"';
	  } 
	  $html .= '/>';
	  return $html;
}

// 3.Разместите функцию из предыдущего упражнения в отдельном файле. Затем создайте еще один файл, загружающий первый
// файл, используя его для вывода на экран ряд дескрипторов <img />.
echo 'Упражнение 3';

// Файл html_img1.php содержит функцию из предыдущего упражнения

include "html_img1.php"; 
// если в процессе выполнения будет ошибка, то в консоль выдаст предупреждение E_WARNING,
// а скрипт продолжит выполняться

$image = '/images/';

print html_img1('imag.png');
print html_img1('imag1.png',null,640,480);


* 4.Что выводится на экран в приведенном ниже фрагменте кода?
 
function restaurant_check($meal, $tax, $tip) {
	$tax_amount = $meal * ($tax / 100);
	$tip_amount = $meal * ($tip / 100);
	return $meal + $tax_amount + $tip_amount;
}

$cash_on_hand = 31;
$meal = 25;
$tax = 10;
$tip = 10;

while(($cost = restaurant_check($meal, $tax,$tip)) < $cash_on_hand) {
	$tip++;
	print "I can afford a tip of $tip% ($cost)\n";
} 


На экран выводится:
I can afford a tip of 11% (30)
I can afford a tip of 12% (30.25)
I can afford a tip of 13% (30.5)
I can afford a tip of 14% (30.75)


/* 5.Такие цвета веб-палитры, как, например, #ffffff и #сс3399, составляются из шестнадцатеричных значений красной,
зеленой и синей составляющих цвета. Напишите функцию, принимающую в качестве аргументов десятичные значения красной,
зеленой и синей составляющих цвета и возвращающую символьную строку, содержащую подходящий цвет для применения на 
веб-странице. Так, если указаны аргументы 255, 0 и 255 при вызове данной функции, она должна возвратить символьную
строку #ff00ff. Для написания данной функции может оказаться полезной встроенная функция dechex()
*/
echo 'Упражнение 5';

function color($red, $green, $blue) {
	$dex = [ dechex($red), dechex($green), dechex($blue) ];
	// добавить в начало числа 0, если значение цвета состоит из одной цифры 
	foreach ($dex as $i => $val) {
			if (strlen($val) === 1) {
			$dex[$i] = "0$val";
		}
	}
	return '#' . implode('', $dex);
}
